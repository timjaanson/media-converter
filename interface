#!/bin/bash
set -e
set -u
set -o pipefail
if [ -v CONVERTER_DEBUG_SET_X ]; then
  set -x
fi

INPUT_DIR=/input/
OUTPUT_DIR=/output/

if [ -d $OUTPUT_DIR ]; then
  OUTPUT_VOLUME=1
else
  OUTPUT_VOLUME=0
  mkdir $OUTPUT_DIR
fi

debug() {
  if [ -v CONVERTER_DEBUG ]; then
    echo "DEBUG: $@"
  fi
}

help () {
cat << EOF
Docker container and shell script wrapper for batch converting various types of media files.
Uses ffmpeg, ImageMagick and common cli tools for converting.

See README.md for help and more examples!

Output:
By default converted files will be saved to a directory called "output" in the mounted volume.
To save the files to a different location, mount another volume to the container's "/output" directory:
  -v /tmp:/output
In the above example all converted files will be saved to /tmp on the host machine

EXAMPLES:

Video: Convert all files in current working directory to mp4 using ffmpeg
    docker run --rm \
      -e APPLICATION=ffmpeg \
      -v $(pwd):/input \
      timjaanson/media-converter \
      -i INPUT_FILE OUTPUT_FILE.mp4

Image: Convert all files in current working directory to png using ImageMagick's convert binary
    docker run --rm \
      -e APPLICATION=convert \
      -v $(pwd):/input \
      timjaanson/media-converter \
      INPUT_FILE OUTPUT_FILE.png

base64: Convert all files in current working directory to base64 css url() format using linux cli tools. 
    docker run --rm \
      -e APPLICATION=b64 \
      -v $(pwd):/input \
      timjaanson/media-converter \
      -o css INPUT_FILE OUTPUT_FILE.txt

interactive: Doesn't run any application, allows you to explore the container and use the tools manually.
    docker run --rm -it \
      --entrypoint "/bin/bash" \
      timjaanson/media-converter
EOF
}

ARGUMENT_ARRAY=()
arguments_to_array() {
    local concat=""
    local t=""
    ARGUMENT_ARRAY=()

    for word in $@; do
        local len=`expr "$word" : '.*"'`

        [ "$len" -eq 1 ] && concat="true"

        if [ "$concat" ]; then
            t+=" $word"
        else
            word=${word#\"}
            word=${word%\"}
            ARGUMENT_ARRAY+=("$word")
        fi

        if [ "$concat" -a "$len" -gt 1 ]; then
            t=${t# }
            t=${t#\"}
            t=${t%\"}
            ARGUMENT_ARRAY+=("$t")
            t=""
            concat=""
        fi
    done
}

parse_arguments() {
  while getopts 'a:h' OPTION; do
    case "$OPTION" in
      a)
        APPLICATION="$OPTARG"
        ;;

      h)
        help
        exit 1
        ;;

      ?)
        echo "see '$(basename $0) -h' for help"
        exit 1
        ;;
        
    esac
  done
  shift "$(($OPTIND -1))"
}

direct_convert() {
  for file in $INPUT_DIR*; do
    if [ -f "$file" ]; then
      debug "File: $file"
      filename_and_type=$(basename "$file")
      echo "Converting $filename_and_type"
      filename="${filename_and_type%.*}"
      app_args=$(echo "$ARGS" | sed "s~INPUT_FILE~\"$file\"~g")
      app_args=$(echo "$app_args" | sed "s~OUTPUT_FILE~\"$OUTPUT_DIR$filename~g")
      app_args="$app_args\""
      arguments_to_array $app_args
      debug $APPLICATION "${ARGUMENT_ARRAY[@]}"
      $APPLICATION "${ARGUMENT_ARRAY[@]}"
    fi
  done
}

direct_convert_single() {
  debug $APPLICATION $ARGS
  $APPLICATION $ARGS
}

if [ -v APPLICATION ]; then
  debug "Converting application is manually set to $APPLICATION"
  
  if [ $OUTPUT_VOLUME -eq 1 ]; then
    debug "Volume attached to $OUTPUT_DIR, not moving $OUTPUT_DIR!"
  else
    debug "Setting up output folder"
    mkdir -p ${INPUT_DIR}output
    OUTPUT_DIR=${INPUT_DIR}output/
  fi
  
  ARGS="$@"
  if [ -v NO_BATCH ]; then
    debug "Starting single file conversion!"
    direct_convert_single
  else
    debug "Starting batch conversion"
    direct_convert
  fi
  debug "Conversion done"

  debug "All done!"
else
  debug "Converting application not set with env variable APPLICATION"
  debug "parsing arguments..."
  parse_arguments $@

  debug "All done!"
fi